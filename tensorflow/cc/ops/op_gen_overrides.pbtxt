# array_ops
op { name: "BroadcastArgs" rename_to: "BroadcastDynamicShape" }
op { name: "BroadcastGradientArgs" hide: true }
op { name: "ConcatOffset" skip: true }  # Maybe should just be hidden?
op { name: "Concat" skip: true }
op { name: "ConcatV2" rename_to: "Concat" }
op { name: "ExpandDims" input_rename: { from: "dim" to: "axis" } }
op { name: "ListDiff" rename_to: "SetDiff1D" }
op { name: "MirrorPadGrad" hide: true }
op { name: "Reverse" skip: true }
op { name: "ReverseV2" rename_to: "Reverse" }
op { name: "Split" input_rename: { from: "split_dim" to: "axis" } }
op { name: "SplitV" input_rename: { from: "split_dim" to: "axis" } }
op { name: "Squeeze" input_rename: { from: "squeeze_dims" to: "axis" } }
op { name: "Pack" rename_to: "Stack" }
op { name: "Unpack" rename_to: "Unstack" }
op { name: "Select" rename_to: "Where3" input_rename: { from: "t" to: "x" } input_rename: { from: "e" to: "y" } }
op { name: "Where" input_rename: { from: "input" to: "condition" } }


# candidate_sampling_ops
op { name: "ThreadUnsafeUnigramCandidateSampler", skip: true }

# control_flow_ops
# TODO(josh11b): Hide Switch and Merge once we write and migrate users to
# a Cond() API.
#op { name: "Switch" hide: true }
#op { name: "Merge" hide: true }
op { name: "RefMerge" hide: true }
op { name: "Exit" hide: true }
op { name: "RefExit" hide: true }
op { name: "Enter" hide: true }
op { name: "RefEnter" hide: true }
op { name: "RefIdentity" hide: true }

# ctc_ops

# data_flow_ops
op { name: "FakeQueue" skip: true }
op { name: "FIFOQueue" skip: true}
op { name: "FIFOQueueV2" rename_to: "FIFOQueue" }
op { name: "PaddingFIFOQueue" skip: true }
op { name: "PaddingFIFOQueueV2" rename_to: "PaddingFIFOQueue" }
op { name: "PriorityQueue" skip: true }
op { name: "PriorityQueueV2" rename_to: "PriorityQueue" }
op { name: "QueueClose" skip: true }
op { name: "QueueCloseV2" rename_to: "QueueClose" }
op { name: "QueueDequeue" skip: true }
op { name: "QueueDequeueV2" rename_to: "QueueDequeue" }
op { name: "QueueDequeueMany" skip: true }
op { name: "QueueDequeueManyV2" rename_to: "QueueDequeueMany" }
op { name: "QueueDequeueUpTo" skip: true }
op { name: "QueueDequeueUpToV2" rename_to: "QueueDequeueUpTo" }
op { name: "QueueEnqueue" skip: true }
op { name: "QueueEnqueueV2" rename_to: "QueueEnqueue" }
op { name: "QueueEnqueueMany" skip: true }
op { name: "QueueEnqueueManyV2" rename_to: "QueueEnqueueMany" }
op { name: "QueueSize" skip: true }
op { name: "QueueSizeV2" rename_to: "QueueSize" }
op { name: "RandomShuffleQueue" skip: true }
op { name: "RandomShuffleQueueV2" rename_to: "RandomShuffleQueue" }
op { name: "ReaderNumRecordsProduced" skip: true }
op { name: "ReaderNumRecordsProducedV2" rename_to: "ReaderNumRecordsProduced" }
op { name: "ReaderNumWorkUnitsCompleted" skip: true }
op { name: "ReaderNumWorkUnitsCompletedV2" rename_to: "ReaderNumWorkUnitsCompleted" }
op { name: "ReaderRead" skip: true }
op { name: "ReaderReadUpTo" skip: true }
op { name: "ReaderReadUpToV2" rename_to: "ReaderReadUpTo" }
op { name: "ReaderReadV2" rename_to: "ReaderRead" }
op { name: "ReaderReset" skip: true }
op { name: "ReaderResetV2" rename_to: "ReaderReset" }
op { name: "ReaderRestoreState" skip: true }
op { name: "ReaderRestoreStateV2" rename_to: "ReaderRestoreState" }
op { name: "ReaderSerializeState" skip: true }
op { name: "ReaderSerializeStateV2" rename_to: "ReaderSerializeState" }
op { name: "FixedLengthRecordReader" skip: true }
op { name: "FixedLengthRecordReaderV2" rename_to: "FixedLengthRecordReader" }
op { name: "IdentityReader" skip: true }
op { name: "IdentityReaderV2" rename_to: "IdentityReader" }
op { name: "TFRecordReader" skip: true }
op { name: "TFRecordReaderV2" rename_to: "TFRecordReader" }
op { name: "TextLineReader" skip: true }
op { name: "TextLineReaderV2" rename_to: "TextLineReader" }

# Skip hash table ops until we have better support in C++ (ops are currently
# only used in contrib)
op { name: "HashTable" skip: true }
op { name: "InitializeTable" skip: true }
op { name: "InitializeTableFromTextFile" skip: true }
op { name: "LookupTableFind" skip: true }
op { name: "LookupTableImport" skip: true }
op { name: "LookupTableInsert" skip: true }
op { name: "LookupTableSize" skip: true }
op { name: "MutableDenseHashTable" skip: true }
op { name: "MutableHashTable" skip: true }
op { name: "MutableHashTableOfTensors" skip: true }

# Stack ops are internal to control flow gradients (not yet implemented in C++)
op { name: "Stack" skip: true }
op { name: "StackClose" skip: true }
op { name: "StackPop" skip: true }
op { name: "StackPush" skip: true }

op { name: "TensorArrayCloseV2" skip: true }
op { name: "TensorArrayCloseV3" rename_to: "TensorArrayClose" }
op { name: "TensorArrayConcatV2" skip: true }
op { name: "TensorArrayConcatV3" rename_to: "TensorArrayConcat" }
op { name: "TensorArrayGatherV2" skip: true }
op { name: "TensorArrayGatherV3" rename_to: "TensorArrayGather" }
op { name: "TensorArrayGradV2" skip: true }
op { name: "TensorArrayGradV3" rename_to: "TensorArrayGrad" }
op { name: "TensorArrayReadV2" skip: true }
op { name: "TensorArrayReadV3" rename_to: "TensorArrayRead" }
op { name: "TensorArrayScatterV2" skip: true }
op { name: "TensorArrayScatterV3" rename_to: "TensorArrayScatter" }
op { name: "TensorArraySizeV2" skip: true }
op { name: "TensorArraySizeV3" rename_to: "TensorArraySize" }
op { name: "TensorArraySplitV2" skip: true }
op { name: "TensorArraySplitV3" rename_to: "TensorArraySplit" }
op { name: "TensorArrayV2" skip: true }
op { name: "TensorArrayV3" rename_to: "TensorArray" }
op { name: "TensorArrayWriteV2" skip: true }
op { name: "TensorArrayWriteV3" rename_to: "TensorArrayWrite" }

op { name: "WholeFileReader" skip: true }
op { name: "WholeFileReaderV2" rename_to: "WholeFileReader" }

# functional_ops

# image_ops
op { name: "AdjustContrastv2" rename_to: "AdjustContrast" }
op { name: "ResizeBilinearGrad" hide: true }
op { name: "ResizeNearestNeighborGrad" hide: true }

# io_ops

# linalg_ops
op { name: "SelfAdjointEigV2" rename_to: "SelfAdjointEig" }

# logging_ops
op { name: "AudioSummaryV2" rename_to: "AudioSummary" }
# math_ops
op { name: "All" alias: "ReduceAll" input_rename: { from: "reduction_indices" to: "axis" } }
op { name: "Any" alias: "ReduceAny" input_rename: { from: "reduction_indices" to: "axis" } }
op { name: "Max" alias: "ReduceMax" input_rename: { from: "reduction_indices" to: "axis" } }
op { name: "Mean" alias: "ReduceMean" input_rename: { from: "reduction_indices" to: "axis" } }
op { name: "Min" alias: "ReduceMin" input_rename: { from: "reduction_indices" to: "axis" } }
op { name: "Mul" rename_to: "Multiply" alias: "Mul" }
op { name: "Neg" rename_to: "Negate" alias: "Neg" }
op { name: "Prod" alias: "ReduceProd" input_rename: { from: "reduction_indices" to: "axis" } }
op { name: "Sub" rename_to: "Subtract" alias: "Sub" }
op { name: "Sum" alias: "ReduceSum" input_rename: { from: "reduction_indices" to: "axis" } }
op { name: "SigmoidGrad" hide: true }
op { name: "TanhGrad" hide: true }
op { name: "InvGrad" hide: true }
op { name: "ReciprocalGrad" hide: true }
op { name: "SqrtGrad" hide: true }
op { name: "RsqrtGrad" hide: true }

# *Grad ops get hidden, only for use by the gradient code.
op { name: "SigmoidGrad" hide: true }
op { name: "TanhGrad" hide: true }
op { name: "InvGrad" hide: true }
op { name: "ReciprocalGrad" hide: true }
op { name: "SqrtGrad" hide: true }
op { name: "RsqrtGrad" hide: true }

# nn_ops
op { name: "AvgPoolGrad" hide: true }
op { name: "LRNGrad" hide: true }
op { name: "MaxPoolGrad" hide: true }
op { name: "MaxPoolGradWithArgmax" hide: true }
op { name: "ReluGrad" hide: true }
op { name: "Relu6Grad" hide: true }
op { name: "EluGrad" hide: true }
op { name: "SoftplusGrad" hide: true }
op { name: "SoftsignGrad" hide: true }
op { name: "FractionalAvgPoolGrad" hide: true }
op { name: "FractionalMaxPoolGrad" hide: true }
op { name: "TopKV2" rename_to: "TopK" }
op { name: "BiasAddV1" skip: true }  # Use BiasAdd instead

# parsing_ops

# random_ops

op { name: "RandomStandardNormal" rename_to: "RandomNormal" }
# script_ops
# Calling Python functions from a C++ program isn't supported
op { name: "PyFunc" skip: true }
op { name: "PyFuncStateless" skip: true}

# sdca_ops

# state_ops

op { name: "Variable" skip: true }
op { name: "VariableV2" rename_to: "Variable" }

# sparse_ops

# string_ops

# user_ops

# training_ops

